pipeline {
    environment {
        docker_registry = "lucasdelimanogueira/generic-scalable-ai-system"
        dockerhub_credential_id = "dockerhub-credential"
    }

    agent any

    stages {
        stage ('Build Image') {
            steps {
                script {
                    dockerapp = docker.build(docker_registry + ":${env.BUILD_ID}", "-f ./model-server/Dockerfile ./model-server")
                }
            }
        }

        stage ('Test Image') {
            steps {
                script {
                    // run the container
                    def containerId = sh(script: "docker run -d --shm-size 1g --net=host -v ./model-server/model_repository:/models $docker_registry:$BUILD_ID", returnStdout: true)
                    sh "docker logs $containerId"

                    try {
                        // check if the triton server service started correctly  
                        def maxRetries = 2 
                        def retryInterval = 10  
                        def retries = 0
                        def serviceReady = false

                        sleep retryInterval
                        
                        while (!serviceReady && retries < maxRetries) {
                            def healthcheckResponse = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" localhost:8000/v2/health/ready", returnStdout: true).trim()

                            if (healthcheckResponse == "200") {
                                echo "Service is ready!"
                                serviceReady = true
                            } else {
                                echo "Service is not yet ready, waiting for $retryInterval seconds before retrying..."
                                sleep retryInterval
                                retries++
                            }
                        }

                        if (!serviceReady) {
                            error "Service did not become ready within the specified timeout"
                        }

                        def testServiceResponse = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" --location --request POST 'http://localhost:8000/v2/models/gpt2/versions/1/infer' --data-raw '{\"inputs\":[{\"name\":\"input_text\",\"shape\":[1, 1],\"datatype\":\"BYTES\",\"data\":[\"The earth is\"]}],\"outputs\":[{\"name\": \"output_text\"}]}'", returnStdout: true).trim()
                        echo "testServiceResponse" + testServiceResponse
                        if (testServiceResponse == "200") {
                            echo "Service test passed successfully!"
                        } else {
                            error "Service test failed"
                        }

                    } finally {
                        // Stop and remove the container
                        sh "docker stop $containerId"
                        //sh "docker rmi $docker_registry:$BUILD_ID"
                    } 
                }
            }
        }

        /*stage ('Push Image') {
            steps {
                script {
                    docker.withRegistry("https://registry.hub.docker.com", dockerhub_credential_id)
                    dockerapp.push("latest")
                    dockerapp.push("${env.BUILD_ID}")

                    sh "docker rmi $docker_registry:$BUILD_ID"
                }
            }
        }*/
    }
}